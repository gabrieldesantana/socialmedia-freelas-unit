// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace SocialMediaFreelas.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240522190137_AdjustOnFreelancerV2")]
    partial class AdjustOnFreelancerV2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("Cliente", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Actived")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TB_Clientes", (string)null);
                });

            modelBuilder.Entity("Experiencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Actived")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Avaliacao")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Empresa")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FreelancerId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FreelancerId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Projeto")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Tecnologia")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Valor")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId1");

                    b.ToTable("TB_Experiencias", (string)null);
                });

            modelBuilder.Entity("Freelancer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Actived")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PretensaoSalarial")
                        .HasColumnType("TEXT");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TB_Freelancers", (string)null);
                });

            modelBuilder.Entity("Vaga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Actived")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ClienteId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClienteId1")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FreelancerId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Remuneracao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId1");

                    b.ToTable("TB_Vagas", (string)null);
                });

            modelBuilder.Entity("Cliente", b =>
                {
                    b.HasOne("Vaga", null)
                        .WithOne("Cliente")
                        .HasForeignKey("Cliente", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Experiencia", b =>
                {
                    b.HasOne("Freelancer", null)
                        .WithMany("Experiencias")
                        .HasForeignKey("FreelancerId1");
                });

            modelBuilder.Entity("Freelancer", b =>
                {
                    b.HasOne("Experiencia", null)
                        .WithOne("Freelancer")
                        .HasForeignKey("Freelancer", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Vaga", null)
                        .WithOne("Freelancer")
                        .HasForeignKey("Freelancer", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Vaga", b =>
                {
                    b.HasOne("Cliente", null)
                        .WithMany("Vagas")
                        .HasForeignKey("ClienteId1");
                });

            modelBuilder.Entity("Cliente", b =>
                {
                    b.Navigation("Vagas");
                });

            modelBuilder.Entity("Experiencia", b =>
                {
                    b.Navigation("Freelancer")
                        .IsRequired();
                });

            modelBuilder.Entity("Freelancer", b =>
                {
                    b.Navigation("Experiencias");
                });

            modelBuilder.Entity("Vaga", b =>
                {
                    b.Navigation("Cliente")
                        .IsRequired();

                    b.Navigation("Freelancer")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
